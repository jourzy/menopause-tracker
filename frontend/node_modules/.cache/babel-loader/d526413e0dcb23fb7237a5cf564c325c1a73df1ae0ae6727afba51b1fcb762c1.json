{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\Documents\\\\Projects\\\\pause_copy\\\\group-5-spring-24\\\\pause\\\\frontend\\\\src\\\\components\\\\GetSymptoms.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\n\n// getting the list of symptoms from the database and dynamically adding to jsx checkboxes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetSymptoms(props) {\n  _s();\n  const [symptoms, setSymptoms] = useState([]);\n\n  // on load gets symptoms from db\n  useEffect(() => {\n    axios.get('http://localhost:8081/symptoms').then(res => setSymptoms(res.data)).catch(err => console.log(err));\n  }, []);\n\n  // when symptoms are checked this is updated locally\n  // If 'no symptoms' is checked, other checkboxes are diabled\n  const handleOnChange = event => {\n    const {\n      id,\n      checked\n    } = event.target;\n    if (id === 'NS') {\n      props.handleNoSymptomsChange(checked);\n    } else {\n      props.handleSymptomChange(id, checked);\n    }\n  };\n\n  // symptoms from db are rendered as checkboxes\n  const renderSymptoms = symptoms => {\n    return symptoms.map(symptom => /*#__PURE__*/_jsxDEV(Form.Check, {\n      type: \"checkbox\",\n      id: symptom.symptom_id,\n      name: symptom.symptom_description,\n      checked: symptom.symptom_id === 'NS' ? props.noSymptomsChecked : props.checkedSymptoms.includes(symptom.symptom_id) // disables other symptoms if 'no symptoms' selected\n      ,\n      onChange: handleOnChange,\n      label: symptom.symptom_description,\n      disabled: props.noSymptomsChecked && symptom.symptom_id !== 'NS' // this disables all symptoms except 'No Symptoms'\n    }, symptom.symptom_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderSymptoms(symptoms)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(GetSymptoms, \"2rn6QCC1f5I5f2LE2tpEVrKnpWU=\");\n_c = GetSymptoms;\nexport default GetSymptoms;\nvar _c;\n$RefreshReg$(_c, \"GetSymptoms\");","map":{"version":3,"names":["React","useState","useEffect","axios","Form","jsxDEV","_jsxDEV","GetSymptoms","props","_s","symptoms","setSymptoms","get","then","res","data","catch","err","console","log","handleOnChange","event","id","checked","target","handleNoSymptomsChange","handleSymptomChange","renderSymptoms","map","symptom","Check","type","symptom_id","name","symptom_description","noSymptomsChecked","checkedSymptoms","includes","onChange","label","disabled","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/emman/Documents/Projects/pause_copy/group-5-spring-24/pause/frontend/src/components/GetSymptoms.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n// getting the list of symptoms from the database and dynamically adding to jsx checkboxes\r\nfunction GetSymptoms(props) {\r\n\r\n  const [symptoms, setSymptoms] = useState([]);\r\n\r\n\r\n  // on load gets symptoms from db\r\n  useEffect(() => {\r\n    axios.get('http://localhost:8081/symptoms')\r\n      .then(res => setSymptoms(res.data))\r\n      .catch(err => console.log(err));\r\n  }, []);\r\n\r\n\r\n  // when symptoms are checked this is updated locally\r\n  // If 'no symptoms' is checked, other checkboxes are diabled\r\n  const handleOnChange = (event) => {\r\n    const { id, checked } = event.target;\r\n    if (id === 'NS') {\r\n      props.handleNoSymptomsChange(checked);\r\n    } else {\r\n      props.handleSymptomChange(id, checked);\r\n    }\r\n  };\r\n\r\n\r\n  // symptoms from db are rendered as checkboxes\r\n  const renderSymptoms = (symptoms) => {\r\n    return symptoms.map((symptom) => (\r\n      <Form.Check\r\n        type=\"checkbox\"\r\n        key={symptom.symptom_id}\r\n        id={symptom.symptom_id}\r\n        name={symptom.symptom_description}\r\n        checked={symptom.symptom_id === 'NS' ? props.noSymptomsChecked : props.checkedSymptoms.includes(symptom.symptom_id)} // disables other symptoms if 'no symptoms' selected\r\n        onChange={handleOnChange}\r\n        label={symptom.symptom_description}\r\n        disabled={props.noSymptomsChecked && symptom.symptom_id !== 'NS'} // this disables all symptoms except 'No Symptoms'\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div>{renderSymptoms(symptoms)}</div>\r\n  );\r\n}\r\n\r\nexport default GetSymptoms;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,sBAAsB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,WAAWA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAG5C;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACS,GAAG,CAAC,gCAAgC,CAAC,CACxCC,IAAI,CAACC,GAAG,IAAIH,WAAW,CAACG,GAAG,CAACC,IAAI,CAAC,CAAC,CAClCC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;EACA,MAAMG,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAM;MAAEC,EAAE;MAAEC;IAAQ,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpC,IAAIF,EAAE,KAAK,IAAI,EAAE;MACfd,KAAK,CAACiB,sBAAsB,CAACF,OAAO,CAAC;IACvC,CAAC,MAAM;MACLf,KAAK,CAACkB,mBAAmB,CAACJ,EAAE,EAAEC,OAAO,CAAC;IACxC;EACF,CAAC;;EAGD;EACA,MAAMI,cAAc,GAAIjB,QAAQ,IAAK;IACnC,OAAOA,QAAQ,CAACkB,GAAG,CAAEC,OAAO,iBAC1BvB,OAAA,CAACF,IAAI,CAAC0B,KAAK;MACTC,IAAI,EAAC,UAAU;MAEfT,EAAE,EAAEO,OAAO,CAACG,UAAW;MACvBC,IAAI,EAAEJ,OAAO,CAACK,mBAAoB;MAClCX,OAAO,EAAEM,OAAO,CAACG,UAAU,KAAK,IAAI,GAAGxB,KAAK,CAAC2B,iBAAiB,GAAG3B,KAAK,CAAC4B,eAAe,CAACC,QAAQ,CAACR,OAAO,CAACG,UAAU,CAAE,CAAC;MAAA;MACrHM,QAAQ,EAAElB,cAAe;MACzBmB,KAAK,EAAEV,OAAO,CAACK,mBAAoB;MACnCM,QAAQ,EAAEhC,KAAK,CAAC2B,iBAAiB,IAAIN,OAAO,CAACG,UAAU,KAAK,IAAK,CAAC;IAAA,GAN7DH,OAAO,CAACG,UAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOxB,CACF,CAAC;EACJ,CAAC;EAED,oBACEtC,OAAA;IAAAuC,QAAA,EAAMlB,cAAc,CAACjB,QAAQ;EAAC;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEzC;AAACnC,EAAA,CA5CQF,WAAW;AAAAuC,EAAA,GAAXvC,WAAW;AA8CpB,eAAeA,WAAW;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}