{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\Documents\\\\Projects\\\\pause_copy\\\\group-5-spring-24\\\\pause\\\\frontend\\\\src\\\\components\\\\CalendarView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport ListView from './ListView';\nimport { addSelectedDate, addSymptom, emptySymptoms, selectDate, selectSubmittedDate } from '../redux/userSlice';\nimport '../styles/CalendarView.css';\n\n// the main component of the homepage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarView = () => {\n  _s();\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.user.userId);\n  const selectedDate = useSelector(selectDate);\n  const dateToSubmit = useSelector(selectSubmittedDate);\n  const userSymptoms = useSelector(state => state.user.symptoms);\n  useEffect(() => {\n    // getting the symptoms for the user on a specific date\n    const queryData = {\n      user: user,\n      date: dateToSubmit\n    };\n    // console.log(queryData);\n    axios.post('http://localhost:8081/user/symptoms', queryData).then(res => {\n      dispatch(emptySymptoms());\n      res.data.forEach(item => {\n        dispatch(addSymptom(item.symptom_description));\n      });\n    }).catch(err => console.log(err));\n  }, [user, dispatch, dateToSubmit]);\n\n  // when the user clicks a date in the calendar the selectedDate \n  // is updated as a string in redux store\n  // to avoid error: cannot add unserialized data to redux\n  const handleDateClick = date => {\n    dispatch(addSelectedDate(date.toISOString()));\n  };\n\n  // CalendarView has two child components: Calendar and ListView\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      style: {\n        marginRight: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Calendar, {\n        onClickDay: handleDateClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-container\",\n      children: /*#__PURE__*/_jsxDEV(ListView, {\n        symptoms: userSymptoms,\n        selectedDate: selectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarView, \"RqSzbJF7KsnGoF2vazorGKeA5Ho=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = CalendarView;\nexport default CalendarView;\nvar _c;\n$RefreshReg$(_c, \"CalendarView\");","map":{"version":3,"names":["React","useEffect","Calendar","useSelector","useDispatch","axios","ListView","addSelectedDate","addSymptom","emptySymptoms","selectDate","selectSubmittedDate","jsxDEV","_jsxDEV","CalendarView","_s","dispatch","user","state","userId","selectedDate","dateToSubmit","userSymptoms","symptoms","queryData","date","post","then","res","data","forEach","item","symptom_description","catch","err","console","log","handleDateClick","toISOString","style","display","children","className","marginRight","onClickDay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/emman/Documents/Projects/pause_copy/group-5-spring-24/pause/frontend/src/components/CalendarView.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ListView from './ListView';\r\nimport { addSelectedDate, addSymptom, \r\n        emptySymptoms, selectDate, selectSubmittedDate } from '../redux/userSlice';\r\nimport '../styles/CalendarView.css';\r\n\r\n\r\n// the main component of the homepage\r\nconst CalendarView = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const user = useSelector((state) => state.user.userId);\r\n  const selectedDate = useSelector(selectDate);\r\n  const dateToSubmit = useSelector(selectSubmittedDate);\r\n  const userSymptoms = useSelector((state) => state.user.symptoms);\r\n\r\n\r\n  useEffect(() => {\r\n    // getting the symptoms for the user on a specific date\r\n    const queryData = {user: user, date: dateToSubmit};\r\n    // console.log(queryData);\r\n    axios.post('http://localhost:8081/user/symptoms', queryData)\r\n      .then(res => {\r\n        dispatch(emptySymptoms())\r\n        res.data.forEach((item) => {\r\n          dispatch(addSymptom(item.symptom_description))\r\n        })\r\n       })\r\n    .catch(err => console.log(err));\r\n  }, [user, dispatch, dateToSubmit]) \r\n \r\n\r\n  // when the user clicks a date in the calendar the selectedDate \r\n  // is updated as a string in redux store\r\n  // to avoid error: cannot add unserialized data to redux\r\n  const handleDateClick = (date) => {\r\n    dispatch(addSelectedDate(date.toISOString()));\r\n  };\r\n\r\n  // CalendarView has two child components: Calendar and ListView\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <div className=\"calendar-container\" style={{ marginRight: '20px' }}>\r\n        <Calendar onClickDay={handleDateClick} />\r\n      </div>\r\n      <div className=\"list-container\">\r\n        <ListView symptoms={userSymptoms} selectedDate={selectedDate}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}