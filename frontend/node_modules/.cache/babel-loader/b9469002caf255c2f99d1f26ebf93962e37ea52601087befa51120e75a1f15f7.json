{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emman\\\\Documents\\\\Projects\\\\pause_copy\\\\group-5-spring-24\\\\pause\\\\frontend\\\\src\\\\components\\\\RenderUserSymptoms.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport LogSymptoms from \"./LogSymptoms\";\nimport ButtonOpenLogSymptoms from './ButtonOpenLogSymptoms';\nimport axios from 'axios';\nimport { selectDate, selectSubmittedDate, emptySymptoms } from '../redux/userSlice';\nimport '../styles/ButtonOpenLogSymptoms.css';\n\n// Component to render in ListView if user symptoms have been logged for this date\n// Displays the selected date and a list of the symptoms logged by the user\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RenderUserSymptoms() {\n  _s();\n  const [showLogSymptoms, setShowLogSymptoms] = useState(false);\n  const user = useSelector(state => state.user.userId);\n  const selectedDate = useSelector(selectDate);\n  const userSymptoms = useSelector(state => state.user.symptoms);\n  const dateToSubmit = useSelector(selectSubmittedDate);\n  const dispatch = useDispatch();\n\n  // event listener to open LogSymptoms modal when user clicks button\n  const handleButtonClick = () => {\n    setShowLogSymptoms(true);\n  };\n\n  // event listener to close LogSymptoms modal when user clicks button\n  const closeLogSymptoms = () => {\n    setShowLogSymptoms(false);\n  };\n\n  // event listener to delete user symptoms for selected date from the db\n  // Also updates the userSymptoms in redux store\n  const deleteSymptoms = () => {\n    const queryData = {\n      user: user,\n      date: dateToSubmit\n    };\n    axios.post('http://localhost:8081/user/diary/delete', queryData).then(res => {\n      console.log(res);\n    }).catch(err => console.log(err));\n    dispatch(emptySymptoms());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Symptoms for \", selectedDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: userSymptoms.map((symptom, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: symptom\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ButtonOpenLogSymptoms, {\n        className: \"edit-button\",\n        onClick: handleButtonClick,\n        value: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"delete-button\",\n        onClick: deleteSymptoms,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(LogSymptoms, {\n        show: showLogSymptoms,\n        closeLogSymptoms: closeLogSymptoms\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(RenderUserSymptoms, \"dtSTd3pdRjy1acpRZn1bCs4qWyI=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n_c = RenderUserSymptoms;\nexport default RenderUserSymptoms;\nvar _c;\n$RefreshReg$(_c, \"RenderUserSymptoms\");","map":{"version":3,"names":["React","useState","ListGroup","useSelector","useDispatch","LogSymptoms","ButtonOpenLogSymptoms","axios","selectDate","selectSubmittedDate","emptySymptoms","jsxDEV","_jsxDEV","RenderUserSymptoms","_s","showLogSymptoms","setShowLogSymptoms","user","state","userId","selectedDate","userSymptoms","symptoms","dateToSubmit","dispatch","handleButtonClick","closeLogSymptoms","deleteSymptoms","queryData","date","post","then","res","console","log","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","toDateString","map","symptom","index","Item","className","onClick","value","show","_c","$RefreshReg$"],"sources":["C:/Users/emman/Documents/Projects/pause_copy/group-5-spring-24/pause/frontend/src/components/RenderUserSymptoms.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport LogSymptoms from \"./LogSymptoms\";\r\nimport ButtonOpenLogSymptoms from './ButtonOpenLogSymptoms';\r\nimport axios from 'axios';\r\nimport { selectDate, selectSubmittedDate, emptySymptoms } from '../redux/userSlice';\r\nimport '../styles/ButtonOpenLogSymptoms.css';\r\n\r\n\r\n// Component to render in ListView if user symptoms have been logged for this date\r\n// Displays the selected date and a list of the symptoms logged by the user\r\nfunction RenderUserSymptoms() {\r\n\r\n    const [showLogSymptoms, setShowLogSymptoms] = useState(false);\r\n    const user = useSelector((state) => state.user.userId);\r\n    const selectedDate = useSelector(selectDate);\r\n    const userSymptoms = useSelector((state) => state.user.symptoms);\r\n    const dateToSubmit = useSelector(selectSubmittedDate);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    // event listener to open LogSymptoms modal when user clicks button\r\n    const handleButtonClick = () => {\r\n      setShowLogSymptoms(true);\r\n    };\r\n\r\n\r\n    // event listener to close LogSymptoms modal when user clicks button\r\n    const closeLogSymptoms = () => {\r\n      setShowLogSymptoms(false);\r\n  }\r\n\r\n    // event listener to delete user symptoms for selected date from the db\r\n    // Also updates the userSymptoms in redux store\r\n    const deleteSymptoms = () => {\r\n      const queryData = {user: user, date: dateToSubmit};\r\n      axios.post('http://localhost:8081/user/diary/delete', queryData)\r\n    .then(res => {\r\n      console.log(res);\r\n      })\r\n    .catch(err => console.log(err)); \r\n    dispatch(emptySymptoms());\r\n  }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n              <br/>\r\n            <h3>Symptoms for {selectedDate.toDateString()}</h3>\r\n            <br/>\r\n            <ListGroup>          \r\n                {userSymptoms.map((symptom, index) => (\r\n                  <ListGroup.Item key={index}>{symptom}</ListGroup.Item>\r\n                ))}\r\n            </ListGroup>\r\n          </div>\r\n          <div>\r\n            <br/>\r\n            <ButtonOpenLogSymptoms className=\"edit-button\" onClick={handleButtonClick} value=\"Edit\"/>\r\n            <button className=\"delete-button\" onClick={deleteSymptoms}>Delete</button>\r\n            <LogSymptoms \r\n                  show={showLogSymptoms} \r\n                  closeLogSymptoms={closeLogSymptoms} \r\n              />\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RenderUserSymptoms;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}