{"ast":null,"code":"import { createSlice, createSelector } from '@reduxjs/toolkit';\nexport const userReducer = createSlice({\n  name: 'user',\n  initialState: {\n    userId: \"\",\n    symptoms: [],\n    dateString: new Date().toISOString()\n  },\n  reducers: {\n    addUserId: (state, action) => {\n      return {\n        ...state,\n        userId: action.payload\n      };\n    },\n    addSelectedDate: (state, action) => {\n      return {\n        ...state,\n        dateString: action.payload\n      };\n    },\n    addSymptom: (state, action) => {\n      return {\n        ...state,\n        symptoms: [...state.symptoms, action.payload]\n      };\n    },\n    emptySymptoms: state => {\n      return {\n        ...state,\n        symptoms: []\n      };\n    },\n    addSymptoms: (state, action) => {\n      return {\n        ...state,\n        symptoms: [action.payload]\n      };\n    }\n  }\n});\n\n/** Create a selector to turn dateString back into date object */\nexport const selectDate = createSelector(store => store.user.dateString, dateStr => new Date(dateStr));\n\n// Create a selector to turn date object into format for querying database\nexport const selectSubmittedDate = createSelector(selectDate, date => date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate());\n\n// Action creators are generated for each case reducer function\nexport const {\n  addUserId,\n  addSelectedDate,\n  addSymptom,\n  emptySymptoms,\n  addDateToSubmit,\n  addSymptoms\n} = userReducer.actions;\nexport default userReducer.reducer;","map":{"version":3,"names":["createSlice","createSelector","userReducer","name","initialState","userId","symptoms","dateString","Date","toISOString","reducers","addUserId","state","action","payload","addSelectedDate","addSymptom","emptySymptoms","addSymptoms","selectDate","store","user","dateStr","selectSubmittedDate","date","getFullYear","getMonth","getDate","addDateToSubmit","actions","reducer"],"sources":["C:/Users/emman/Documents/Projects/pause_copy/group-5-spring-24/pause/frontend/src/redux/userSlice.js"],"sourcesContent":["import { createSlice, createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const userReducer = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n    userId: \"\",\r\n    symptoms: [],\r\n    dateString: new Date().toISOString(),\r\n\r\n        \r\n    },\r\n    reducers: {\r\n        addUserId: (state, action) => {\r\n            return {\r\n                ...state,\r\n                userId : action.payload\r\n            }\r\n            \r\n        },\r\n\r\n        addSelectedDate: (state, action) => {\r\n            return {\r\n                ...state,\r\n                dateString : action.payload\r\n            }\r\n            \r\n        },\r\n        addSymptom: (state, action) => {\r\n            return {\r\n                ...state,\r\n                symptoms: [...state.symptoms, action.payload]\r\n            }\r\n        },\r\n        emptySymptoms: (state) => {\r\n            return {\r\n                ...state,\r\n                symptoms: []\r\n            }\r\n        },\r\n        addSymptoms: (state, action) => {\r\n            return {\r\n                ...state,\r\n                symptoms : [action.payload]\r\n            }\r\n        }\r\n        \r\n    },\r\n}\r\n)\r\n\r\n/** Create a selector to turn dateString back into date object */ \r\nexport const selectDate = createSelector(\r\n    store => store.user.dateString, \r\n    dateStr => new Date(dateStr)\r\n);\r\n\r\n// Create a selector to turn date object into format for querying database\r\nexport const selectSubmittedDate = createSelector(\r\n    selectDate, \r\n    date => date.getFullYear() + \"-\" + (date.getMonth()+1) + \"-\" + date.getDate()\r\n);\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { addUserId, addSelectedDate, addSymptom, emptySymptoms, addDateToSubmit, addSymptoms } = userReducer.actions\r\n\r\nexport default userReducer.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,OAAO,MAAMC,WAAW,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACdC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EAGnC,CAAC;EACDC,QAAQ,EAAE;IACNC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1B,OAAO;QACH,GAAGD,KAAK;QACRP,MAAM,EAAGQ,MAAM,CAACC;MACpB,CAAC;IAEL,CAAC;IAEDC,eAAe,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAChC,OAAO;QACH,GAAGD,KAAK;QACRL,UAAU,EAAGM,MAAM,CAACC;MACxB,CAAC;IAEL,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3B,OAAO;QACH,GAAGD,KAAK;QACRN,QAAQ,EAAE,CAAC,GAAGM,KAAK,CAACN,QAAQ,EAAEO,MAAM,CAACC,OAAO;MAChD,CAAC;IACL,CAAC;IACDG,aAAa,EAAGL,KAAK,IAAK;MACtB,OAAO;QACH,GAAGA,KAAK;QACRN,QAAQ,EAAE;MACd,CAAC;IACL,CAAC;IACDY,WAAW,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC5B,OAAO;QACH,GAAGD,KAAK;QACRN,QAAQ,EAAG,CAACO,MAAM,CAACC,OAAO;MAC9B,CAAC;IACL;EAEJ;AACJ,CACA,CAAC;;AAED;AACA,OAAO,MAAMK,UAAU,GAAGlB,cAAc,CACpCmB,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACd,UAAU,EAC9Be,OAAO,IAAI,IAAId,IAAI,CAACc,OAAO,CAC/B,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGtB,cAAc,CAC7CkB,UAAU,EACVK,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,GAAG,GAAG,IAAID,IAAI,CAACE,QAAQ,CAAC,CAAC,GAAC,CAAC,CAAC,GAAG,GAAG,GAAGF,IAAI,CAACG,OAAO,CAAC,CAChF,CAAC;;AAED;AACA,OAAO,MAAM;EAAEhB,SAAS;EAAEI,eAAe;EAAEC,UAAU;EAAEC,aAAa;EAAEW,eAAe;EAAEV;AAAY,CAAC,GAAGhB,WAAW,CAAC2B,OAAO;AAE1H,eAAe3B,WAAW,CAAC4B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}